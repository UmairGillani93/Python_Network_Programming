import socket
import sys
import threading

def server_loop(local_host, local_port, remote_host, remote_port, receive_first):

    local_host, local_port = '',9999
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print('[**] Socket created..')

    try:
        server.bind((local_host, local_port))

    except:
        print('[!!] Failed to listen on %s' %local_host)
        print('[!!] Check for other listening sockets')
        sys.exit(0)

    server.listen(5)

    print('[**] Listening on %s:%d' %(local_host, local_port))

    while True:
        client_socket, address = server.accept()

        proxy_thread = threading.Thread(target = proxy_handler, args = (client_socket,
        remote_host, remote_port, receive_first))
        proxy_thread.start()


def main():

    if len(sys.argv[1:]) != 5:
        print('Usage: ./pyoxy.py [local_host] [local_port] [remote_host] [remote_port] [rec_first]')
        print('Example: ./proxy.py [127.0.0.1] [9000] [10.12.132.1] [9000] [True]')
        sys.exit(0)


    # setting up parameters..

    local_host = sys.argv[1]
    local_port = int(sys.argv[2])
    remote_host = sys.argv[3]
    remote_port = int(sys.argv[4])
    receive_first = sys.argv[5]

    if 'True' in receive_first:
        receive_first = True
    else:
        receive_first = False

server_loop(local_host, local_port, remote_host, remote_port, receive_first)

def proxy_handler(client_socket, remote_host, remote_port, receive_first):

    # creating socket at remote host terminal, AND connecting with remote host

    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, remote_port))

    # now receive the data bits if necessory

    if receive_first:
        remote_buffer = receive_from(remote_host)
        hexdump(remote_buffer)

        # sending it to our response handler

        remote_buffer = response_handler(remote_buffer)

        # if we want to send the data to our local client, send it..
        if len(remote_buffer):
            client_socket.send(remote_buffer)
            print('sending %d bytes to local client' %(len(remote_buffer)))

    # now lets read from local client
    while True:
        local_buffer = receive_from(client_socket)
        if len(local_buffer):
            print('Received %d bytes from local buffer' %(len(local_buffer)))
            hexdump(local_buffer)

            # send it to our response_handler now

            local_buffer = response_handler(local_buffer)
            # now sending this data to our remote_host
            remote_socket.send(local_buffer)
            print('sent to remote_host')

        # now receive back the response
        remote_buffer = receive_from(remote_socket)
        if len(remote_buffer):
            print('Received %s bytes from remote host' %(len(remote_buffer)))
            hexdump(remote_buffer)
            remote_buffer = response_handler(remote_buffer)

            # send this to now client socket
            client_socket.send(remote_buffer)
            print('Sent to local host')

        # if no data left on either side

        if not len(local_buffer) or not len(remote_buffer):
            client_socket.close()
            remote_socket.close()
            print('NO more data, connection terminated!!')

            break
# hexdump --> copied function, source google.com
# converts received bytes into Hexadecimal

def hexdump(src, length=16):
    result = []
    digits = 4 if isinstance(src, unicode) else 2

    for i in xrange(0, len(src), length):
        s = src[i:i+length]
        hexa = b' '.join(["%0*X" % (digits, ord(x)) for x in s])
        text = b''.join([x if 0x20 <= ord(x) < 0x7F else b'.' for x in s])
        result.append( b"%04X %-*s %s" % (i, length*(digits + 1), hexa, Â¬
        text) )
        print b'\n'.join(result)

def receive_from(conection):

    """
    receives bytes from remote host and client and sends towards the directed
    location
    """
    buffer = ''
    connection.settimeout(2)

    try:
        while True:
            data = connection.recv(1024)
            if not data:
                break

            buffer += data

    except:
        pass

    return buffer


def request_handler(buffer):

    """ handles the requests sent from client """
    return buffer

def response_handler(buffer):
    """ handles the responses sent from the client"""

    return buffer


main()
