import socket
import threading
import sys

backlog = 5
def server_loop(local_host, local_port, remote_host, remote_port, rec_first):

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        server.bind((local_host, local_port))

    except:
        print('[!!] Failed to listen on %s', %local_host)
        print('[!!] Check for other listening sockets')
        sys.exit(0)

    server.listen(backlog)

    print('[**] Listening on %s', %local_host)

    while True:
        client_socket, address = server.accept()
        print('[**] Received local connection from %s' ,%(address[0]))

        ## start a thread to talk to the remote host

        proxy_thread = threading.Thread(target = proxy_handler, args = (client_socket,

        remote_host, remote_port, rec_first))

        proxy_handler.start()

def main():

    if len(sys.argv[1:] != 5):
        print('Usage: ./pyoxy.py [local_host] [local_port] [remote_host] [remote_port] [rec_first]')
        print('Example: ./proxy.py [127.0.0.1] [9000] [10.12.132.1] [9000] [True]')
        sys.exit(0)

    # setting up local listening parameters

    local_host = sys.argv[1]
    local_port = int(sys.argv[2])

    # setting up remote parameters


    remote_host = sys.argv[3]
    remote_port = int(sys.argv[4])
    rec_first = sys.argv[5]

    if 'True' in rcv_first:
        rec_first = True
    else:
        rcv_first = False


server_loop(local_host, local_port, remote_host, remote_port, rcv_first)

def proxy_handler(client_socket, remote_host, remote_port, rcv_first):

    ## connecting with the remote host

    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socke.connect((remote_host,remote_port))

    # receiving data from remote host, if necessory
    if rcv_first:
        remote_buffer = rcv_from(remote_socket)
        hexdump(remote_buffer)

        ## send this received data to our response_handler

    remote_buffer = response_handler(remote_buffer)

    #if we want to send data to our local_client

    if len(remote_buffer):
        print('Sending %d bytes to local_client', %len(remote_buffer))
        client_socket.send(remote_buffer)










main()
